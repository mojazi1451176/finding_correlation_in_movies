# -*- coding: utf-8 -*-
"""Python_Project2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IFwRrkPUXBue49_2Q7Kbjv8iYuSlUH1u
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries

import pandas as pd
import seaborn as sns
import numpy as np

import matplotlib
import matplotlib.pyplot as plt
plt.style.use('ggplot')
from matplotlib.pyplot import figure

# %matplotlib inline
matplotlib.rcParams['figure.figsize']=(12,8) #This will adjust the configuration the plots we will create in this project

#Read in the data

df=pd.read_csv(r'C:\Users\Mo Jazi\Downloads\Build a Portfolio\movies.csv')

#let's look at the top five rows of the data

df.head()

#Identifying null/missing values

for col in df.columns:
    pct_missing= np.mean(df[col].isnull())
#     print('{} - {}%'.format(col,pct_missing))
#It might be a good idea to round the percentage
    print('{} - {}%'.format(col,round(pct_missing*100,2)))

#Next, we are going to take a quick look at the data types
df.dtypes

#We then change the data type of gross, budget, runtime and votes

# I got the following error,IntCastingNaNError: Cannot convert non-finite values (NA or inf) to integer, when I wrote:df['votes']=df['votes'].astype('int64') .

# I tried to fix it by adding the following: df['budget']=df['budget'].apply(np.round).astype('int64')

# I also tried: df=df.dropna()

df=df.dropna()

df['budget']=df['budget'].astype('int64')

df['votes']=df['votes'].astype('int64')

df['runtime']=df['runtime'].apply(np.round).astype('int64')

df['gross']=df['gross'].apply(np.round).astype('int64')

df.dtypes

#There seems to be the case that year column and release year column don't match while they should.
#So, we need correct it. In doing so, I return the date from the Released column

df['correctedyear']=df['released'].astype(str).str[:-15]
df.head()

# It is then better to sort by columns such as 'gross' to be able to look at our numbers easily.

df=df.sort_values(by=['gross'],inplace=False, ascending=False)
df

# You might wonder if it is possible to look at all rows instead of a limited number of them with those ... shown in between.
# we can either set a limit or nothing. I thought it might also be a good idea to get rid of additional spaces before and after each values/integers

df.columns = df.columns.str.strip()

pd.set_option('display.max_rows',None)

df.head()

#Another thing you might want to do while exploring datasets is to see if there are duplicates and drop them.
# We can either identify which columns we want to remove duplicates from or apply it to all columns

df['name']=df['name'].drop_duplicates().sort_values(ascending=False)
df.head()

# Next, we would want to see if there is/are any correlations between any of the columns. We can do that by creating a scatterplot.

plt.scatter(x=df['budget'],y=df['gross'])
plt.title('Budget vs Gross Earnings')
plt.xlabel('Gross Earnings')
plt.ylabel('Budget for film')
plt.show()

# The above scatter is hard to read. It is missing a trend line.

sns.regplot(x='budget',y='gross',data=df,scatter_kws={"color":"grey"}, line_kws={"color":"blue"})

# Next, let us see if there is any correlation via using a function
#Just be aware that this function works on numerical values only, not strings.
# we could use corr(), pearson

# kendall or spearman are two other different methods to calculate correlation with

df.corr(method='pearson')

# As you can see, there is a high correlation between budget and gross.

# Next, it is better to visualize data to make it easier to understand.

correlation_matrix=df.corr(method='pearson')

sns.heatmap(correlation_matrix, annot=True)

plt.title('Correlation Metric For Numeric Features')
plt.xlabel('Movie Features')
plt.ylabel('Movie Features')
plt.show()

# Some columns are not numeric. We can create a numeric representation of those columns

df.head()

df_numerized = df


for col_name in df_numerized.columns:
    if(df_numerized[col_name].dtype == 'object'):
        df_numerized[col_name]= df_numerized[col_name].astype('category')
        df_numerized[col_name] = df_numerized[col_name].cat.codes

df_numerized.head()

# So, we changed the data type in the previous query so that we can give all columns with datatype as object a numeric representation.
# Next, we want to see what the outcome looks like in a heatmap.

correlation_matrix=df_numerized.corr(method='pearson')

sns.heatmap(correlation_matrix, annot=True)

plt.title('Correlation Metric For Numeric Features')
plt.xlabel('Movie Features')
plt.ylabel('Movie Features')
plt.show()

# It is a bit hard to read the following heatmap. So, we need to make a few changes.

AB=df_numerized.corr('pearson')

# An easy way to visualize the data is to unstack them which gives us the ability to look at the numbers in groups, rather than individually.
AB=df_numerized.corr('pearson')
unstacking_AB=AB.unstack()
unstacking_AB

# Now, we need to sort them in a way that it is easier ot read them.
ABCD=unstacking_AB.sort_values()
ABCD

# Next, we only want to look at the pairs with high correlation

high_correlation= ABCD[(ABCD)>.5]
high_correlation

# We can now conclude that votes and budget have the highest correlation